package bitlap.sbt.analyzer;

import bitlap.sbt.analyzer.util.Notifications$;
import com.intellij.openapi.project.Project;
import com.intellij.uiDesigner.core.Spacer;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import javax.swing.*;
import java.awt.*;

/**
 * TODO create panel by kotlin DSL
 */
@SuppressWarnings("unchecked")
public class SbtDependencyAnalyzerPanel {
    public JPanel mainPanel;

    public JTextField organization;
    public JCheckBox compileCheckBox;
    public JCheckBox providedCheckBox;
    public JCheckBox testCheckBox;
    public JTextField fileCache;
    private final SettingsState settings;
    private final Project project;

    public SbtDependencyAnalyzerPanel(Project project) {
        this.project = project;
        this.settings = SettingsState.getSettings(project);
    }

    boolean isModified() {
        boolean disableAnalyzeCompile = settings.getDisableAnalyzeCompile() == compileCheckBox.isSelected();
        boolean disableAnalyzeTest = settings.getDisableAnalyzeTest() == testCheckBox.isSelected();
        boolean disableAnalyzeProvided = settings.getDisableAnalyzeProvided() == providedCheckBox.isSelected();
        boolean fileCacheTimeout = String.valueOf(settings.fileCacheTimeout()).equals(fileCache.getText());
        boolean org = settings.getOrganization() == null && organization.getText() == null ||
                (organization.getText() != null && organization.getText().equals(settings.getOrganization()));

        return !(org && fileCacheTimeout && disableAnalyzeCompile && disableAnalyzeTest && disableAnalyzeProvided);

    }

    void apply() {
        // if data change, we publish a notification
        boolean changed = false;
        if (isModified()) {
            changed = true;
        }

        settings.setOrganization(organization.getText());
        settings.setDisableAnalyzeCompile(compileCheckBox.isSelected());
        settings.setDisableAnalyzeTest(testCheckBox.isSelected());
        settings.setDisableAnalyzeProvided(providedCheckBox.isSelected());
        try {
            int t = Integer.parseInt(fileCache.getText());
            settings.setFileCacheTimeout(t);
        } catch (Exception ignore) {
            settings.setFileCacheTimeout(3600);
        }
        if (changed) {
            Notifications$.MODULE$.notifySettingsChanged(project);
            SettingsState.SettingsChangePublisher().onConfigurationChanged(this.project, settings);
        }
    }

    void from() {
        compileCheckBox.setSelected(settings.disableAnalyzeCompile());
        providedCheckBox.setSelected(settings.disableAnalyzeProvided());
        testCheckBox.setSelected(settings.disableAnalyzeTest());
        organization.setText(settings.getOrganization());
        fileCache.setText(String.valueOf(settings.fileCacheTimeout()));
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new FormLayout("fill:d:grow,fill:d:grow,fill:d:grow,fill:d:grow,fill:d:grow", "center:max(d;4px):noGrow,center:32px:noGrow,center:max(d;4px):noGrow,center:12px:grow"));
        mainPanel.setAlignmentX(0.0f);
        mainPanel.setAlignmentY(0.0f);
        mainPanel.setAutoscrolls(false);
        mainPanel.setMaximumSize(new Dimension(400, 120));
        mainPanel.setMinimumSize(new Dimension(-1, -1));
        mainPanel.setPreferredSize(new Dimension(350, 120));
        final JLabel label1 = new JLabel();
        label1.setMaximumSize(new Dimension(80, 30));
        label1.setMinimumSize(new Dimension(-1, -1));
        label1.setPreferredSize(new Dimension(80, 30));
        label1.setText("Disable Scope:");
        CellConstraints cc = new CellConstraints();
        mainPanel.add(label1, cc.xy(1, 3));
        final JLabel label2 = new JLabel();
        label2.setMaximumSize(new Dimension(80, 30));
        label2.setMinimumSize(new Dimension(-1, -1));
        label2.setPreferredSize(new Dimension(80, 30));
        label2.setText("Organization:");
        mainPanel.add(label2, cc.xy(1, 2));
        testCheckBox = new JCheckBox();
        testCheckBox.setMaximumSize(new Dimension(60, 25));
        testCheckBox.setMinimumSize(new Dimension(-1, -1));
        testCheckBox.setPreferredSize(new Dimension(60, 25));
        testCheckBox.setText("Test");
        mainPanel.add(testCheckBox, cc.xy(2, 3));
        compileCheckBox = new JCheckBox();
        compileCheckBox.setMaximumSize(new Dimension(60, 25));
        compileCheckBox.setMinimumSize(new Dimension(-1, -1));
        compileCheckBox.setPreferredSize(new Dimension(60, 25));
        compileCheckBox.setText("Compile");
        mainPanel.add(compileCheckBox, cc.xy(3, 3));
        providedCheckBox = new JCheckBox();
        providedCheckBox.setMaximumSize(new Dimension(60, 25));
        providedCheckBox.setMinimumSize(new Dimension(-1, -1));
        providedCheckBox.setPreferredSize(new Dimension(60, 25));
        providedCheckBox.setText("Provided");
        mainPanel.add(providedCheckBox, cc.xy(4, 3));
        final JLabel label3 = new JLabel();
        label3.setMaximumSize(new Dimension(80, 30));
        label3.setMinimumSize(new Dimension(-1, -1));
        label3.setPreferredSize(new Dimension(80, 30));
        label3.setText("File Cache Timeout:");
        mainPanel.add(label3, cc.xy(1, 1));
        fileCache = new JTextField();
        fileCache.setColumns(8);
        fileCache.setHorizontalAlignment(2);
        fileCache.setMaximumSize(new Dimension(112, 30));
        fileCache.setMinimumSize(new Dimension(-1, -1));
        fileCache.setPreferredSize(new Dimension(112, 30));
        fileCache.setText("3600");
        mainPanel.add(fileCache, cc.xy(2, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        organization = new JTextField();
        organization.setColumns(8);
        organization.setHorizontalAlignment(2);
        organization.setMaximumSize(new Dimension(112, 30));
        organization.setMinimumSize(new Dimension(-1, -1));
        organization.setPreferredSize(new Dimension(112, 30));
        organization.setText("");
        mainPanel.add(organization, cc.xy(2, 2));
        final JLabel label4 = new JLabel();
        label4.setMaximumSize(new Dimension(60, 30));
        label4.setMinimumSize(new Dimension(-1, -1));
        label4.setPreferredSize(new Dimension(60, 30));
        label4.setText("seconds");
        mainPanel.add(label4, cc.xy(3, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, cc.xyw(1, 4, 4, CellConstraints.CENTER, CellConstraints.FILL));
        final Spacer spacer2 = new Spacer();
        mainPanel.add(spacer2, cc.xywh(5, 1, 1, 4, CellConstraints.FILL, CellConstraints.DEFAULT));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
